Terminals unused in grammar

    _U
    _PREKID
    _PRESKOK


Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 parameter: %empty
    7          | _TYPE _ID

    8 $@2: %empty

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   10 variable_list: %empty
   11              | variable_list variable

   12 variable: _TYPE _ID _SEMICOLON

   13 statement_list: %empty
   14               | statement_list statement

   15 statement: compound_statement
   16          | assignment_statement
   17          | if_statement
   18          | return_statement
   19          | for_stmt
   20          | while_statement
   21          | switch_statement
   22          | petljaj_statement
   23          | basic_for

   24 @3: %empty

   25 $@4: %empty

   26 $@5: %empty

   27 $@6: %empty

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

   29 maybe_step: %empty
   30           | _STEP literal

   31 @7: %empty

   32 $@8: %empty

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO literal $@8 _COLON statement

   34 $@9: %empty

   35 $@10: %empty

   36 $@11: %empty

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET

   38 cases: case
   39      | cases case

   40 $@12: %empty

   41 case: _CASE literal $@12 _COLON statement break

   42 break: %empty
   43      | _BREAK _SEMICOLON

   44 default: %empty
   45        | _DEFAULT _COLON statement

   46 @13: %empty

   47 $@14: %empty

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

   49 @15: %empty

   50 @16: %empty

   51 @17: %empty

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

   53 compound_statement: _LBRACKET statement_list _RBRACKET

   54 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   55 num_exp: exp
   56        | num_exp _AROP exp

   57 exp: literal
   58    | _ID
   59    | function_call
   60    | _LPAREN num_exp _RPAREN

   61 literal: _INT_NUMBER
   62        | _UINT_NUMBER

   63 $@18: %empty

   64 function_call: _ID $@18 _LPAREN argument _RPAREN

   65 argument: %empty
   66         | num_exp

   67 if_statement: if_part
   68             | if_part _ELSE statement

   69 @19: %empty

   70 $@20: %empty

   71 if_part: _IF _LPAREN @19 rel_exp $@20 _RPAREN statement

   72 rel_exp: num_exp _RELOP num_exp

   73 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 7 12 52
    _IF (259) 71
    _ELSE (260) 68
    _DIRECTION <i> (261) 28
    _RETURN (262) 73
    _ID <s> (263) 5 7 12 28 33 37 48 52 54 58 64
    _INT_NUMBER <s> (264) 61
    _UINT_NUMBER <s> (265) 62
    _LPAREN (266) 5 37 48 52 60 64 71
    _STEP (267) 30
    _RPAREN (268) 5 37 48 52 60 64 71
    _LBRACKET (269) 9 37 48 53
    _RBRACKET (270) 9 37 48 53
    _ASSIGN (271) 28 52 54
    _FOR (272) 28 52
    _BREAK (273) 43
    _DEFAULT (274) 45
    _WHILE (275) 48
    _INC (276) 48 52
    _CASE (277) 41
    _COLON (278) 33 41 45
    _SWITCH (279) 37
    _SEMICOLON (280) 12 28 43 48 52 54 73
    _DO (281) 33
    _U (282)
    _OD (283) 33
    _PETLJAJ (284) 33
    _U_OPSEGU (285) 33
    _PREKID (286)
    _PRESKOK (287)
    _NEXT (288) 28
    _AROP <i> (289) 56
    _RELOP <i> (290) 72
    ONLY_IF (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function_list (39)
        on left: 2 3
        on right: 1 3
    function (40)
        on left: 5
        on right: 2 3
    $@1 (41)
        on left: 4
        on right: 5
    parameter (42)
        on left: 6 7
        on right: 5
    body (43)
        on left: 9
        on right: 5
    $@2 (44)
        on left: 8
        on right: 9
    variable_list (45)
        on left: 10 11
        on right: 9 11
    variable (46)
        on left: 12
        on right: 11
    statement_list (47)
        on left: 13 14
        on right: 9 14 53
    statement (48)
        on left: 15 16 17 18 19 20 21 22 23
        on right: 14 28 33 41 45 48 52 68 71
    basic_for (49)
        on left: 28
        on right: 23
    @3 (50)
        on left: 24
        on right: 28
    $@4 (51)
        on left: 25
        on right: 28
    $@5 (52)
        on left: 26
        on right: 28
    $@6 (53)
        on left: 27
        on right: 28
    maybe_step (54)
        on left: 29 30
        on right: 28
    petljaj_statement (55)
        on left: 33
        on right: 22
    @7 (56)
        on left: 31
        on right: 33
    $@8 (57)
        on left: 32
        on right: 33
    switch_statement (58)
        on left: 37
        on right: 21
    $@9 (59)
        on left: 34
        on right: 37
    $@10 (60)
        on left: 35
        on right: 37
    $@11 (61)
        on left: 36
        on right: 37
    cases (62)
        on left: 38 39
        on right: 37 39
    case (63)
        on left: 41
        on right: 38 39
    $@12 (64)
        on left: 40
        on right: 41
    break (65)
        on left: 42 43
        on right: 41
    default (66)
        on left: 44 45
        on right: 37
    while_statement (67)
        on left: 48
        on right: 20
    @13 (68)
        on left: 46
        on right: 48
    $@14 (69)
        on left: 47
        on right: 48
    for_stmt (70)
        on left: 52
        on right: 19
    @15 (71)
        on left: 49
        on right: 52
    @16 (72)
        on left: 50
        on right: 52
    @17 (73)
        on left: 51
        on right: 52
    compound_statement (74)
        on left: 53
        on right: 15
    assignment_statement (75)
        on left: 54
        on right: 16
    num_exp <i> (76)
        on left: 55 56
        on right: 54 56 60 66 72 73
    exp <i> (77)
        on left: 57 58 59 60
        on right: 55 56
    literal <i> (78)
        on left: 61 62
        on right: 28 30 33 41 52 57
    function_call <i> (79)
        on left: 64
        on right: 59
    $@18 (80)
        on left: 63
        on right: 64
    argument <i> (81)
        on left: 65 66
        on right: 64
    if_statement (82)
        on left: 67 68
        on right: 17
    if_part <i> (83)
        on left: 71
        on right: 67 68
    @19 (84)
        on left: 69
        on right: 71
    $@20 (85)
        on left: 70
        on right: 71
    rel_exp <i> (86)
        on left: 72
        on right: 48 52 71
    return_statement (87)
        on left: 73
        on right: 18


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 6 (parameter)

    parameter  go to state 11


State 10

    7 parameter: _TYPE . _ID

    _ID  shift, and go to state 12


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body

    _RPAREN  shift, and go to state 13


State 12

    7 parameter: _TYPE _ID .

    $default  reduce using rule 7 (parameter)


State 13

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 14

    body  go to state 15


State 14

    9 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 10 (variable_list)

    variable_list  go to state 16


State 15

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 16

    9 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   11 variable_list: variable_list . variable

    _TYPE  shift, and go to state 17

    $default  reduce using rule 8 ($@2)

    $@2       go to state 18
    variable  go to state 19


State 17

   12 variable: _TYPE . _ID _SEMICOLON

    _ID  shift, and go to state 20


State 18

    9 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 21


State 19

   11 variable_list: variable_list variable .

    $default  reduce using rule 11 (variable_list)


State 20

   12 variable: _TYPE _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 22


State 21

    9 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   14 statement_list: statement_list . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 32
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 22

   12 variable: _TYPE _ID _SEMICOLON .

    $default  reduce using rule 12 (variable)


State 23

   71 if_part: _IF . _LPAREN @19 rel_exp $@20 _RPAREN statement

    _LPAREN  shift, and go to state 43


State 24

   73 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 48
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51


State 25

   54 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 52


State 26

   53 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 53


State 27

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 9 (body)


State 28

   28 basic_for: _FOR . _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON
   52 for_stmt: _FOR . _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _ID      shift, and go to state 54
    _LPAREN  shift, and go to state 55


State 29

   48 while_statement: _WHILE . @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    $default  reduce using rule 46 (@13)

    @13  go to state 56


State 30

   37 switch_statement: _SWITCH . $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET

    $default  reduce using rule 34 ($@9)

    $@9  go to state 57


State 31

   33 petljaj_statement: _PETLJAJ . _ID @7 _U_OPSEGU _OD literal _DO literal $@8 _COLON statement

    _ID  shift, and go to state 58


State 32

   14 statement_list: statement_list statement .

    $default  reduce using rule 14 (statement_list)


State 33

   23 statement: basic_for .

    $default  reduce using rule 23 (statement)


State 34

   22 statement: petljaj_statement .

    $default  reduce using rule 22 (statement)


State 35

   21 statement: switch_statement .

    $default  reduce using rule 21 (statement)


State 36

   20 statement: while_statement .

    $default  reduce using rule 20 (statement)


State 37

   19 statement: for_stmt .

    $default  reduce using rule 19 (statement)


State 38

   15 statement: compound_statement .

    $default  reduce using rule 15 (statement)


State 39

   16 statement: assignment_statement .

    $default  reduce using rule 16 (statement)


State 40

   17 statement: if_statement .

    $default  reduce using rule 17 (statement)


State 41

   67 if_statement: if_part .
   68             | if_part . _ELSE statement

    _ELSE  shift, and go to state 59

    $default  reduce using rule 67 (if_statement)


State 42

   18 statement: return_statement .

    $default  reduce using rule 18 (statement)


State 43

   71 if_part: _IF _LPAREN . @19 rel_exp $@20 _RPAREN statement

    $default  reduce using rule 69 (@19)

    @19  go to state 60


State 44

   58 exp: _ID .
   64 function_call: _ID . $@18 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 63 ($@18)
    $default  reduce using rule 58 (exp)

    $@18  go to state 61


State 45

   61 literal: _INT_NUMBER .

    $default  reduce using rule 61 (literal)


State 46

   62 literal: _UINT_NUMBER .

    $default  reduce using rule 62 (literal)


State 47

   60 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 62
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51


State 48

   56 num_exp: num_exp . _AROP exp
   73 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 63
    _AROP       shift, and go to state 64


State 49

   55 num_exp: exp .

    $default  reduce using rule 55 (num_exp)


State 50

   57 exp: literal .

    $default  reduce using rule 57 (exp)


State 51

   59 exp: function_call .

    $default  reduce using rule 59 (exp)


State 52

   54 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 65
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51


State 53

   14 statement_list: statement_list . statement
   53 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 66
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 32
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 54

   28 basic_for: _FOR _ID . _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    _ASSIGN  shift, and go to state 67


State 55

   52 for_stmt: _FOR _LPAREN . _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _TYPE  shift, and go to state 68


State 56

   48 while_statement: _WHILE @13 . _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    _LPAREN  shift, and go to state 69


State 57

   37 switch_statement: _SWITCH $@9 . _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET

    _LPAREN  shift, and go to state 70


State 58

   33 petljaj_statement: _PETLJAJ _ID . @7 _U_OPSEGU _OD literal _DO literal $@8 _COLON statement

    $default  reduce using rule 31 (@7)

    @7  go to state 71


State 59

   68 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 72
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 60

   71 if_part: _IF _LPAREN @19 . rel_exp $@20 _RPAREN statement

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 73
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51
    rel_exp        go to state 74


State 61

   64 function_call: _ID $@18 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 75


State 62

   56 num_exp: num_exp . _AROP exp
   60 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 76
    _AROP    shift, and go to state 64


State 63

   73 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 73 (return_statement)


State 64

   56 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    exp            go to state 77
    literal        go to state 50
    function_call  go to state 51


State 65

   54 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   56 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 78
    _AROP       shift, and go to state 64


State 66

   53 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 53 (compound_statement)


State 67

   28 basic_for: _FOR _ID _ASSIGN . literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 79


State 68

   52 for_stmt: _FOR _LPAREN _TYPE . _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _ID  shift, and go to state 80


State 69

   48 while_statement: _WHILE @13 _LPAREN . rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 73
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51
    rel_exp        go to state 81


State 70

   37 switch_statement: _SWITCH $@9 _LPAREN . _ID $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET

    _ID  shift, and go to state 82


State 71

   33 petljaj_statement: _PETLJAJ _ID @7 . _U_OPSEGU _OD literal _DO literal $@8 _COLON statement

    _U_OPSEGU  shift, and go to state 83


State 72

   68 if_statement: if_part _ELSE statement .

    $default  reduce using rule 68 (if_statement)


State 73

   56 num_exp: num_exp . _AROP exp
   72 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 64
    _RELOP  shift, and go to state 84


State 74

   71 if_part: _IF _LPAREN @19 rel_exp . $@20 _RPAREN statement

    $default  reduce using rule 70 ($@20)

    $@20  go to state 85


State 75

   64 function_call: _ID $@18 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    $default  reduce using rule 65 (argument)

    num_exp        go to state 86
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51
    argument       go to state 87


State 76

   60 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 60 (exp)


State 77

   56 num_exp: num_exp _AROP exp .

    $default  reduce using rule 56 (num_exp)


State 78

   54 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 54 (assignment_statement)


State 79

   28 basic_for: _FOR _ID _ASSIGN literal . @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    $default  reduce using rule 24 (@3)

    @3  go to state 88


State 80

   52 for_stmt: _FOR _LPAREN _TYPE _ID . @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    $default  reduce using rule 49 (@15)

    @15  go to state 89


State 81

   48 while_statement: _WHILE @13 _LPAREN rel_exp . _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    _LBRACKET  shift, and go to state 90


State 82

   37 switch_statement: _SWITCH $@9 _LPAREN _ID . $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET

    $default  reduce using rule 35 ($@10)

    $@10  go to state 91


State 83

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU . _OD literal _DO literal $@8 _COLON statement

    _OD  shift, and go to state 92


State 84

   72 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 93
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51


State 85

   71 if_part: _IF _LPAREN @19 rel_exp $@20 . _RPAREN statement

    _RPAREN  shift, and go to state 94


State 86

   56 num_exp: num_exp . _AROP exp
   66 argument: num_exp .

    _AROP  shift, and go to state 64

    $default  reduce using rule 66 (argument)


State 87

   64 function_call: _ID $@18 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 95


State 88

   28 basic_for: _FOR _ID _ASSIGN literal @3 . _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    _DIRECTION  shift, and go to state 96


State 89

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 . _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _ASSIGN  shift, and go to state 97


State 90

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET . $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    $default  reduce using rule 47 ($@14)

    $@14  go to state 98


State 91

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 . _RPAREN _LBRACKET cases $@11 default _RBRACKET

    _RPAREN  shift, and go to state 99


State 92

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD . literal _DO literal $@8 _COLON statement

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 100


State 93

   56 num_exp: num_exp . _AROP exp
   72 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 64

    $default  reduce using rule 72 (rel_exp)


State 94

   71 if_part: _IF _LPAREN @19 rel_exp $@20 _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 101
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 95

   64 function_call: _ID $@18 _LPAREN argument _RPAREN .

    $default  reduce using rule 64 (function_call)


State 96

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION . literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 102


State 97

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN . literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 103


State 98

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 . _RPAREN statement _ID _INC _SEMICOLON _RBRACKET

    _RPAREN  shift, and go to state 104


State 99

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN . _LBRACKET cases $@11 default _RBRACKET

    _LBRACKET  shift, and go to state 105


State 100

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal . _DO literal $@8 _COLON statement

    _DO  shift, and go to state 106


State 101

   71 if_part: _IF _LPAREN @19 rel_exp $@20 _RPAREN statement .

    $default  reduce using rule 71 (if_part)


State 102

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal . $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    $default  reduce using rule 25 ($@4)

    $@4  go to state 107


State 103

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal . @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    $default  reduce using rule 50 (@16)

    @16  go to state 108


State 104

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN . statement _ID _INC _SEMICOLON _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 109
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 105

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET . cases $@11 default _RBRACKET

    _CASE  shift, and go to state 110

    cases  go to state 111
    case   go to state 112


State 106

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO . literal $@8 _COLON statement

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 113


State 107

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 . maybe_step statement $@5 _NEXT $@6 _SEMICOLON

    _STEP  shift, and go to state 114

    $default  reduce using rule 29 (maybe_step)

    maybe_step  go to state 115


State 108

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 . _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 116


State 109

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement . _ID _INC _SEMICOLON _RBRACKET

    _ID  shift, and go to state 117


State 110

   41 case: _CASE . literal $@12 _COLON statement break

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 118


State 111

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases . $@11 default _RBRACKET
   39 cases: cases . case

    _CASE  shift, and go to state 110

    $default  reduce using rule 36 ($@11)

    $@11  go to state 119
    case  go to state 120


State 112

   38 cases: case .

    $default  reduce using rule 38 (cases)


State 113

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO literal . $@8 _COLON statement

    $default  reduce using rule 32 ($@8)

    $@8  go to state 121


State 114

   30 maybe_step: _STEP . literal

    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46

    literal  go to state 122


State 115

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step . statement $@5 _NEXT $@6 _SEMICOLON

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 123
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 116

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON . rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement

    _ID           shift, and go to state 44
    _INT_NUMBER   shift, and go to state 45
    _UINT_NUMBER  shift, and go to state 46
    _LPAREN       shift, and go to state 47

    num_exp        go to state 73
    exp            go to state 49
    literal        go to state 50
    function_call  go to state 51
    rel_exp        go to state 124


State 117

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID . _INC _SEMICOLON _RBRACKET

    _INC  shift, and go to state 125


State 118

   41 case: _CASE literal . $@12 _COLON statement break

    $default  reduce using rule 40 ($@12)

    $@12  go to state 126


State 119

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 . default _RBRACKET

    _DEFAULT  shift, and go to state 127

    $default  reduce using rule 44 (default)

    default  go to state 128


State 120

   39 cases: cases case .

    $default  reduce using rule 39 (cases)


State 121

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO literal $@8 . _COLON statement

    _COLON  shift, and go to state 129


State 122

   30 maybe_step: _STEP literal .

    $default  reduce using rule 30 (maybe_step)


State 123

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement . $@5 _NEXT $@6 _SEMICOLON

    $default  reduce using rule 26 ($@5)

    $@5  go to state 130


State 124

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp . _SEMICOLON _ID @17 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 131


State 125

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC . _SEMICOLON _RBRACKET

    _SEMICOLON  shift, and go to state 132


State 126

   41 case: _CASE literal $@12 . _COLON statement break

    _COLON  shift, and go to state 133


State 127

   45 default: _DEFAULT . _COLON statement

    _COLON  shift, and go to state 134


State 128

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 default . _RBRACKET

    _RBRACKET  shift, and go to state 135


State 129

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO literal $@8 _COLON . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 136
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 130

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 . _NEXT $@6 _SEMICOLON

    _NEXT  shift, and go to state 137


State 131

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON . _ID @17 _INC _RPAREN statement

    _ID  shift, and go to state 138


State 132

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON . _RBRACKET

    _RBRACKET  shift, and go to state 139


State 133

   41 case: _CASE literal $@12 _COLON . statement break

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 140
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 134

   45 default: _DEFAULT _COLON . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 141
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 135

   37 switch_statement: _SWITCH $@9 _LPAREN _ID $@10 _RPAREN _LBRACKET cases $@11 default _RBRACKET .

    $default  reduce using rule 37 (switch_statement)


State 136

   33 petljaj_statement: _PETLJAJ _ID @7 _U_OPSEGU _OD literal _DO literal $@8 _COLON statement .

    $default  reduce using rule 33 (petljaj_statement)


State 137

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT . $@6 _SEMICOLON

    $default  reduce using rule 27 ($@6)

    $@6  go to state 142


State 138

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID . @17 _INC _RPAREN statement

    $default  reduce using rule 51 (@17)

    @17  go to state 143


State 139

   48 while_statement: _WHILE @13 _LPAREN rel_exp _LBRACKET $@14 _RPAREN statement _ID _INC _SEMICOLON _RBRACKET .

    $default  reduce using rule 48 (while_statement)


State 140

   41 case: _CASE literal $@12 _COLON statement . break

    _BREAK  shift, and go to state 144

    $default  reduce using rule 42 (break)

    break  go to state 145


State 141

   45 default: _DEFAULT _COLON statement .

    $default  reduce using rule 45 (default)


State 142

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 . _SEMICOLON

    _SEMICOLON  shift, and go to state 146


State 143

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 . _INC _RPAREN statement

    _INC  shift, and go to state 147


State 144

   43 break: _BREAK . _SEMICOLON

    _SEMICOLON  shift, and go to state 148


State 145

   41 case: _CASE literal $@12 _COLON statement break .

    $default  reduce using rule 41 (case)


State 146

   28 basic_for: _FOR _ID _ASSIGN literal @3 _DIRECTION literal $@4 maybe_step statement $@5 _NEXT $@6 _SEMICOLON .

    $default  reduce using rule 28 (basic_for)


State 147

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC . _RPAREN statement

    _RPAREN  shift, and go to state 149


State 148

   43 break: _BREAK _SEMICOLON .

    $default  reduce using rule 43 (break)


State 149

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _FOR       shift, and go to state 28
    _WHILE     shift, and go to state 29
    _SWITCH    shift, and go to state 30
    _PETLJAJ   shift, and go to state 31

    statement             go to state 150
    basic_for             go to state 33
    petljaj_statement     go to state 34
    switch_statement      go to state 35
    while_statement       go to state 36
    for_stmt              go to state 37
    compound_statement    go to state 38
    assignment_statement  go to state 39
    if_statement          go to state 40
    if_part               go to state 41
    return_statement      go to state 42


State 150

   52 for_stmt: _FOR _LPAREN _TYPE _ID @15 _ASSIGN literal @16 _SEMICOLON rel_exp _SEMICOLON _ID @17 _INC _RPAREN statement .

    $default  reduce using rule 52 (for_stmt)
