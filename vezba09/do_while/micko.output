Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 parameter: %empty
    7          | _TYPE _ID

    8 $@2: %empty

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   10 variable_list: %empty
   11              | variable_list variable

   12 variable: _TYPE _ID _SEMICOLON

   13 statement_list: %empty
   14               | statement_list statement

   15 statement: compound_statement
   16          | assignment_statement
   17          | if_statement
   18          | return_statement
   19          | for_stmt
   20          | while_statement
   21          | do_while

   22 @3: %empty

   23 $@4: %empty

   24 $@5: %empty

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

   26 @6: %empty

   27 $@7: %empty

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

   29 @8: %empty

   30 @9: %empty

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

   32 compound_statement: _LBRACKET statement_list _RBRACKET

   33 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   34 num_exp: exp
   35        | num_exp _AROP exp

   36 exp: literal
   37    | _ID
   38    | function_call
   39    | _LPAREN num_exp _RPAREN

   40 literal: _INT_NUMBER
   41        | _UINT_NUMBER

   42 $@10: %empty

   43 function_call: _ID $@10 _LPAREN argument _RPAREN

   44 argument: %empty
   45         | num_exp

   46 if_statement: if_part
   47             | if_part _ELSE statement

   48 @11: %empty

   49 $@12: %empty

   50 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN statement

   51 rel_exp: num_exp _RELOP num_exp

   52 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 7 12
    _IF (259) 50
    _ELSE (260) 47
    _RETURN (261) 52
    _ID <s> (262) 5 7 12 25 28 31 33 37 43
    _INT_NUMBER <s> (263) 40
    _UINT_NUMBER <s> (264) 41
    _LPAREN (265) 5 25 28 31 39 43 50
    _RPAREN (266) 5 25 28 31 39 43 50
    _LBRACKET (267) 9 25 28 32
    _RBRACKET (268) 9 25 28 32
    _ASSIGN (269) 31 33
    _DO (270) 25
    _FOR (271) 31
    _WHILE (272) 25 28
    _INC (273) 25 28 31
    _SEMICOLON (274) 12 25 28 31 33 52
    _AROP <i> (275) 35
    _RELOP <i> (276) 51
    ONLY_IF (277)


Nonterminals, with rules where they appear

    $accept (23)
        on left: 0
    program (24)
        on left: 1
        on right: 0
    function_list (25)
        on left: 2 3
        on right: 1 3
    function (26)
        on left: 5
        on right: 2 3
    $@1 (27)
        on left: 4
        on right: 5
    parameter (28)
        on left: 6 7
        on right: 5
    body (29)
        on left: 9
        on right: 5
    $@2 (30)
        on left: 8
        on right: 9
    variable_list (31)
        on left: 10 11
        on right: 9 11
    variable (32)
        on left: 12
        on right: 11
    statement_list (33)
        on left: 13 14
        on right: 9 14 25 28 32
    statement (34)
        on left: 15 16 17 18 19 20 21
        on right: 14 31 47 50
    do_while (35)
        on left: 25
        on right: 21
    @3 (36)
        on left: 22
        on right: 25
    $@4 (37)
        on left: 23
        on right: 25
    $@5 (38)
        on left: 24
        on right: 25
    while_statement (39)
        on left: 28
        on right: 20
    @6 (40)
        on left: 26
        on right: 28
    $@7 (41)
        on left: 27
        on right: 28
    for_stmt (42)
        on left: 31
        on right: 19
    @8 (43)
        on left: 29
        on right: 31
    @9 (44)
        on left: 30
        on right: 31
    compound_statement (45)
        on left: 32
        on right: 15
    assignment_statement (46)
        on left: 33
        on right: 16
    num_exp <i> (47)
        on left: 34 35
        on right: 33 35 39 45 51 52
    exp <i> (48)
        on left: 36 37 38 39
        on right: 34 35
    literal <i> (49)
        on left: 40 41
        on right: 31 36
    function_call <i> (50)
        on left: 43
        on right: 38
    $@10 (51)
        on left: 42
        on right: 43
    argument <i> (52)
        on left: 44 45
        on right: 43
    if_statement (53)
        on left: 46 47
        on right: 17
    if_part <i> (54)
        on left: 50
        on right: 46 47
    @11 (55)
        on left: 48
        on right: 50
    $@12 (56)
        on left: 49
        on right: 50
    rel_exp <i> (57)
        on left: 51
        on right: 25 28 31 50
    return_statement (58)
        on left: 52
        on right: 18


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 6 (parameter)

    parameter  go to state 11


State 10

    7 parameter: _TYPE . _ID

    _ID  shift, and go to state 12


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body

    _RPAREN  shift, and go to state 13


State 12

    7 parameter: _TYPE _ID .

    $default  reduce using rule 7 (parameter)


State 13

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 14

    body  go to state 15


State 14

    9 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 10 (variable_list)

    variable_list  go to state 16


State 15

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 16

    9 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   11 variable_list: variable_list . variable

    _TYPE  shift, and go to state 17

    $default  reduce using rule 8 ($@2)

    $@2       go to state 18
    variable  go to state 19


State 17

   12 variable: _TYPE . _ID _SEMICOLON

    _ID  shift, and go to state 20


State 18

    9 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 21


State 19

   11 variable_list: variable_list variable .

    $default  reduce using rule 11 (variable_list)


State 20

   12 variable: _TYPE _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 22


State 21

    9 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   14 statement_list: statement_list . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 31
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 22

   12 variable: _TYPE _ID _SEMICOLON .

    $default  reduce using rule 12 (variable)


State 23

   50 if_part: _IF . _LPAREN @11 rel_exp $@12 _RPAREN statement

    _LPAREN  shift, and go to state 40


State 24

   52 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 45
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48


State 25

   33 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 49


State 26

   32 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 50


State 27

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 9 (body)


State 28

   25 do_while: _DO . _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _LBRACKET  shift, and go to state 51


State 29

   31 for_stmt: _FOR . _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _LPAREN  shift, and go to state 52


State 30

   28 while_statement: _WHILE . @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    $default  reduce using rule 26 (@6)

    @6  go to state 53


State 31

   14 statement_list: statement_list statement .

    $default  reduce using rule 14 (statement_list)


State 32

   21 statement: do_while .

    $default  reduce using rule 21 (statement)


State 33

   20 statement: while_statement .

    $default  reduce using rule 20 (statement)


State 34

   19 statement: for_stmt .

    $default  reduce using rule 19 (statement)


State 35

   15 statement: compound_statement .

    $default  reduce using rule 15 (statement)


State 36

   16 statement: assignment_statement .

    $default  reduce using rule 16 (statement)


State 37

   17 statement: if_statement .

    $default  reduce using rule 17 (statement)


State 38

   46 if_statement: if_part .
   47             | if_part . _ELSE statement

    _ELSE  shift, and go to state 54

    $default  reduce using rule 46 (if_statement)


State 39

   18 statement: return_statement .

    $default  reduce using rule 18 (statement)


State 40

   50 if_part: _IF _LPAREN . @11 rel_exp $@12 _RPAREN statement

    $default  reduce using rule 48 (@11)

    @11  go to state 55


State 41

   37 exp: _ID .
   43 function_call: _ID . $@10 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 42 ($@10)
    $default  reduce using rule 37 (exp)

    $@10  go to state 56


State 42

   40 literal: _INT_NUMBER .

    $default  reduce using rule 40 (literal)


State 43

   41 literal: _UINT_NUMBER .

    $default  reduce using rule 41 (literal)


State 44

   39 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 57
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48


State 45

   35 num_exp: num_exp . _AROP exp
   52 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 58
    _AROP       shift, and go to state 59


State 46

   34 num_exp: exp .

    $default  reduce using rule 34 (num_exp)


State 47

   36 exp: literal .

    $default  reduce using rule 36 (exp)


State 48

   38 exp: function_call .

    $default  reduce using rule 38 (exp)


State 49

   33 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 60
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48


State 50

   14 statement_list: statement_list . statement
   32 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 61
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 31
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 51

   25 do_while: _DO _LBRACKET . @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    $default  reduce using rule 22 (@3)

    @3  go to state 62


State 52

   31 for_stmt: _FOR _LPAREN . _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _ID  shift, and go to state 63


State 53

   28 while_statement: _WHILE @6 . _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    _LPAREN  shift, and go to state 64


State 54

   47 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 65
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 55

   50 if_part: _IF _LPAREN @11 . rel_exp $@12 _RPAREN statement

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 66
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48
    rel_exp        go to state 67


State 56

   43 function_call: _ID $@10 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 68


State 57

   35 num_exp: num_exp . _AROP exp
   39 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 69
    _AROP    shift, and go to state 59


State 58

   52 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 52 (return_statement)


State 59

   35 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    exp            go to state 70
    literal        go to state 47
    function_call  go to state 48


State 60

   33 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   35 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 71
    _AROP       shift, and go to state 59


State 61

   32 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 32 (compound_statement)


State 62

   25 do_while: _DO _LBRACKET @3 . statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 72


State 63

   31 for_stmt: _FOR _LPAREN _ID . _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _ASSIGN  shift, and go to state 73


State 64

   28 while_statement: _WHILE @6 _LPAREN . rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 66
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48
    rel_exp        go to state 74


State 65

   47 if_statement: if_part _ELSE statement .

    $default  reduce using rule 47 (if_statement)


State 66

   35 num_exp: num_exp . _AROP exp
   51 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 59
    _RELOP  shift, and go to state 75


State 67

   50 if_part: _IF _LPAREN @11 rel_exp . $@12 _RPAREN statement

    $default  reduce using rule 49 ($@12)

    $@12  go to state 76


State 68

   43 function_call: _ID $@10 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    $default  reduce using rule 44 (argument)

    num_exp        go to state 77
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48
    argument       go to state 78


State 69

   39 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 39 (exp)


State 70

   35 num_exp: num_exp _AROP exp .

    $default  reduce using rule 35 (num_exp)


State 71

   33 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 33 (assignment_statement)


State 72

   14 statement_list: statement_list . statement
   25 do_while: _DO _LBRACKET @3 statement_list . _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 79
    _LBRACKET  shift, and go to state 26
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 31
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 73

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN . literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43

    literal  go to state 80


State 74

   28 while_statement: _WHILE @6 _LPAREN rel_exp . _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    _RPAREN  shift, and go to state 81


State 75

   51 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 82
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48


State 76

   50 if_part: _IF _LPAREN @11 rel_exp $@12 . _RPAREN statement

    _RPAREN  shift, and go to state 83


State 77

   35 num_exp: num_exp . _AROP exp
   45 argument: num_exp .

    _AROP  shift, and go to state 59

    $default  reduce using rule 45 (argument)


State 78

   43 function_call: _ID $@10 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 84


State 79

   25 do_while: _DO _LBRACKET @3 statement_list _ID . _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON
   33 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 49
    _INC     shift, and go to state 85


State 80

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal . @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    $default  reduce using rule 29 (@8)

    @8  go to state 86


State 81

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN . _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    _LBRACKET  shift, and go to state 87


State 82

   35 num_exp: num_exp . _AROP exp
   51 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 59

    $default  reduce using rule 51 (rel_exp)


State 83

   50 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 88
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 84

   43 function_call: _ID $@10 _LPAREN argument _RPAREN .

    $default  reduce using rule 43 (function_call)


State 85

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC . _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _SEMICOLON  shift, and go to state 89


State 86

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 . _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 90


State 87

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET . $@7 statement_list _ID _INC _SEMICOLON _RBRACKET

    $default  reduce using rule 27 ($@7)

    $@7  go to state 91


State 88

   50 if_part: _IF _LPAREN @11 rel_exp $@12 _RPAREN statement .

    $default  reduce using rule 50 (if_part)


State 89

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON . $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    $default  reduce using rule 23 ($@4)

    $@4  go to state 92


State 90

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON . rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 66
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48
    rel_exp        go to state 93


State 91

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 . statement_list _ID _INC _SEMICOLON _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 94


State 92

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 . _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _RBRACKET  shift, and go to state 95


State 93

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp . _SEMICOLON _ID @9 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 96


State 94

   14 statement_list: statement_list . statement
   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list . _ID _INC _SEMICOLON _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 97
    _LBRACKET  shift, and go to state 26
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 31
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 95

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET . _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _WHILE  shift, and go to state 98


State 96

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON . _ID @9 _INC _RPAREN statement

    _ID  shift, and go to state 99


State 97

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID . _INC _SEMICOLON _RBRACKET
   33 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 49
    _INC     shift, and go to state 100


State 98

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE . _LPAREN rel_exp $@5 _RPAREN _SEMICOLON

    _LPAREN  shift, and go to state 101


State 99

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID . @9 _INC _RPAREN statement

    $default  reduce using rule 30 (@9)

    @9  go to state 102


State 100

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC . _SEMICOLON _RBRACKET

    _SEMICOLON  shift, and go to state 103


State 101

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN . rel_exp $@5 _RPAREN _SEMICOLON

    _ID           shift, and go to state 41
    _INT_NUMBER   shift, and go to state 42
    _UINT_NUMBER  shift, and go to state 43
    _LPAREN       shift, and go to state 44

    num_exp        go to state 66
    exp            go to state 46
    literal        go to state 47
    function_call  go to state 48
    rel_exp        go to state 104


State 102

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 . _INC _RPAREN statement

    _INC  shift, and go to state 105


State 103

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON . _RBRACKET

    _RBRACKET  shift, and go to state 106


State 104

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp . $@5 _RPAREN _SEMICOLON

    $default  reduce using rule 24 ($@5)

    $@5  go to state 107


State 105

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC . _RPAREN statement

    _RPAREN  shift, and go to state 108


State 106

   28 while_statement: _WHILE @6 _LPAREN rel_exp _RPAREN _LBRACKET $@7 statement_list _ID _INC _SEMICOLON _RBRACKET .

    $default  reduce using rule 28 (while_statement)


State 107

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 . _RPAREN _SEMICOLON

    _RPAREN  shift, and go to state 109


State 108

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _DO        shift, and go to state 28
    _FOR       shift, and go to state 29
    _WHILE     shift, and go to state 30

    statement             go to state 110
    do_while              go to state 32
    while_statement       go to state 33
    for_stmt              go to state 34
    compound_statement    go to state 35
    assignment_statement  go to state 36
    if_statement          go to state 37
    if_part               go to state 38
    return_statement      go to state 39


State 109

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN . _SEMICOLON

    _SEMICOLON  shift, and go to state 111


State 110

   31 for_stmt: _FOR _LPAREN _ID _ASSIGN literal @8 _SEMICOLON rel_exp _SEMICOLON _ID @9 _INC _RPAREN statement .

    $default  reduce using rule 31 (for_stmt)


State 111

   25 do_while: _DO _LBRACKET @3 statement_list _ID _INC _SEMICOLON $@4 _RBRACKET _WHILE _LPAREN rel_exp $@5 _RPAREN _SEMICOLON .

    $default  reduce using rule 25 (do_while)
